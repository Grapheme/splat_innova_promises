/*** attributes.js ***/


/**
 * Функционал для кнопки удаления записи (в меню) при ее редактировании
 */
/*
$(function(){

    $(".remove-product-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную позицию?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                            return false;
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});
*/


/** 
 * Функционал для кнопки удаления записи (в списке)
 */
$(function(){
	
	$(".remove-attribute-list").click(function(e) {

        e.preventDefault();

		var $this = this;

        $.SmartMessageBox({
			title : "Удалить атрибут?",
			content : "Восстановить его будет невозможно",
			buttons : '[Нет][Да]'
		}, function(ButtonPressed) {

			if(ButtonPressed == "Да") {

				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){$($this).elementDisabled(true);},
					success: function(response, textStatus, xhr){
						if(response.status == true){
							showMessage.constructor('Удалить запись', response.responseText);
							showMessage.smallSuccess();

							//$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            $($this).parents('.sortable-list-item').slideUp();

						} else {
							$($this).elementDisabled(false);
							showMessage.constructor('Удалить запись', 'Возникла ошибка. Обновите страницу и повторите снова.');
							showMessage.smallError();
						}
					},
					error: function(xhr, textStatus, errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удалить запись', 'Возникла ошибка. Повторите снова.');
						showMessage.smallError();
					}
				});

			}
		});
		return false;
	});
});



$(document).ready(function() {
    $('select[name=type]').change(function(){

        //alert( $(this).find("option:selected").attr('prefix') );
        //alert( $(this).val() );

        if ($(this).val() == 'select') {
            $('.select-values').removeClass('hidden');
        } else {
            $('.select-values').addClass('hidden');
        }

    });
});

/*** attributes_groups.js ***/


/**
 * Функционал для кнопки удаления записи (в меню) при ее редактировании
 */
/*
$(function(){

    $(".remove-product-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную позицию?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                            return false;
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});
*/


/** 
 * Функционал для кнопки удаления записи (в списке)
 */
$(function(){
	
	$(".remove-attributes-group-list").click(function(e) {

        e.preventDefault();

        if ($(this).parents('.attributes_group').find('ul li').length) {
            $.SmartMessageBox({
                title : "Невозможно удалить непустую группу атрибутов",
                content : "Перенесите в другую группу или удалите все вложенные атрибуты - после этого данную группу можно будет удалить",
                buttons : '[Хорошо]'
            });
            return false;
        }

		var $this = this;

        $.SmartMessageBox({
			title : "Удалить группу атрибутов?",
			content : "Восстановить ее будет невозможно",
			buttons : '[Нет][Да]'
		}, function(ButtonPressed) {

			if(ButtonPressed == "Да") {

				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){$($this).elementDisabled(true);},
					success: function(response, textStatus, xhr){
						if(response.status == true){
							showMessage.constructor('Удалить запись', response.responseText);
							showMessage.smallSuccess();

							//$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            $($this).parents('.attributes_group').slideUp();

						} else {
							$($this).elementDisabled(false);
							showMessage.constructor('Удалить запись', 'Возникла ошибка. Обновите страницу и повторите снова.');
							showMessage.smallError();
						}
					},
					error: function(xhr, textStatus, errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удалить запись', 'Возникла ошибка. Повторите снова.');
						showMessage.smallError();
					}
				});

			}
		});
		return false;
	});
});


/*** categories.js ***/


/**
 * Функционал для кнопки удаления записи DicVal (в меню) при ее редактировании
 */

$(function(){

    $(".remove-category-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную категорию?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                            return false;
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});



/** 
 * Функционал для кнопки удаления записи (в списке)
 */
$(function(){
	
	$(".remove-category-list").click(function(e) {

        e.preventDefault();

		var $this = this;

        if ($(this).parents('form').attr('data-can-delete') != 1 || $(this).parents('form').attr('data-products-count') != 0) {
            $.SmartMessageBox({
                title : "Невозможно удалить непустую категорию",
                content : "Перенесите или удалите все вложенные категории и товары - после этого данную категорию можно будет удалить",
                buttons : '[Хорошо]'
            });
            return false;
        }

        $.SmartMessageBox({
			title : "Удалить категорию?",
			content : "Восстановить ее будет невозможно",
			buttons : '[Нет][Да]'
		}, function(ButtonPressed) {

			if(ButtonPressed == "Да") {

				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){$($this).elementDisabled(true);},
					success: function(response, textStatus, xhr){
						if(response.status == true){
							showMessage.constructor('Удалить запись', response.responseText);
							showMessage.smallSuccess();

							//$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            $('.dd-item[data-id=' + $($this).parents('.dd-item').attr('data-id') + ']').slideUp();

						} else {
							$($this).elementDisabled(false);
							showMessage.constructor('Удалить запись', 'Возникла ошибка. Обновите страницу и повторите снова.');
							showMessage.smallError();
						}
					},
					error: function(xhr, textStatus, errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удалить запись', 'Возникла ошибка. Повторите снова.');
						showMessage.smallError();
					}
				});

			}
		});
		return false;
	});
});


/*** products.js ***/


/**
 * Функционал для кнопки удаления записи DicVal (в меню) при ее редактировании
 */

$(function(){

    $(".remove-product-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную позицию?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                            return false;
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});



/** 
 * Функционал для кнопки удаления записи (в списке)
 */
$(function(){
	
	$(".remove-product-list").click(function(e) {

        e.preventDefault();

		var $this = this;

        $.SmartMessageBox({
			title : "Удалить запись?",
			content : "",
			buttons : '[Нет][Да]'
		}, function(ButtonPressed) {

			if(ButtonPressed == "Да") {

				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){$($this).elementDisabled(true);},
					success: function(response, textStatus, xhr){
						if(response.status == true){
							showMessage.constructor('Удалить запись', response.responseText);
							showMessage.smallSuccess();

							//$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            $('.dd-item[data-id=' + $($this).parents('.dd-item').attr('data-id') + ']').slideUp();

						} else {
							$($this).elementDisabled(false);
							showMessage.constructor('Удалить запись', 'Возникла ошибка. Обновите страницу и повторите снова.');
							showMessage.smallError();
						}
					},
					error: function(xhr, textStatus, errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удалить запись', 'Возникла ошибка. Повторите снова.');
						showMessage.smallError();
					}
				});

			}
		});
		return false;
	});
});


/*** dic.js ***/


/**
 * Функционал для восстановления резервных копий записей словарей
 */
$('.restore_version').click(function(e) {
    e.preventDefault();

    // get the link
    var url = $(this).attr('data-url');

    // ask verification
    $.SmartMessageBox({
        title : "<i class='fa fa-refresh txt-color-orangeDark'></i> Восстановить эту резервную копию?",
        content : "Текущая версия будет сохранена",
        buttons : '[Нет][Да]'
    }, function(ButtonPressed) {
        if (ButtonPressed == "Да") {
            location.href = url;
        }
    });
});

/**
 * Функционал для кнопки удаления записи DicVal (в меню) при ее редактировании
 */

$(function(){

    $(".remove-dicval-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную запись?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                            return false;
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});



/** 
 * Функционал для кнопки удаления записи (в списке)
 */
$(function(){
	
	$(".remove-dicval-list").click(function(e) {

        e.preventDefault();

		var $this = this;

        $.SmartMessageBox({
			title : "Удалить запись?",
			content : "",
			buttons : '[Нет][Да]'
		}, function(ButtonPressed) {

			if(ButtonPressed == "Да") {

				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){$($this).elementDisabled(true);},
					success: function(response, textStatus, xhr){
						if(response.status == true){
							showMessage.constructor('Удалить запись', response.responseText);
							showMessage.smallSuccess();

							//$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            $('.dd-item[data-id=' + $($this).parents('.dd-item').attr('data-id') + ']').slideUp();

						} else {
							$($this).elementDisabled(false);
							showMessage.constructor('Удалить запись', 'Возникла ошибка. Обновите страницу и повторите снова.');
							showMessage.smallError();
						}
					},
					error: function(xhr, textStatus, errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удалить запись', 'Возникла ошибка. Повторите снова.');
						showMessage.smallError();
					}
				});

			}
		});
		return false;
	});
});



function runDicValFormValidation() {

    var essence = 'dicval';

    var validation = $("#" + essence + "-form").validate({
        rules: validation_rules ? validation_rules : {},
		messages: validation_messages ? validation_messages : {},
		errorPlacement: function(error, element){error.insertAfter(element.parent());},
        ignore: [],
		submitHandler: function(form) {

            if (CheckDicvalSlugUnique) {
                /**
                 * Проверяем системное имя на уникальность
                 */

                var $proceed = false;

                $.ajax({
                    type: "POST",
                    async: false,
                    url: base_url + "/ajax/check-dicval-slug-unique",
                    data: $(form).serialize()
                })
                    .done(function(data, textStatus, jqXHR) {

                        //console.log(data);
                        if (!data.status) {
                            showMessage.constructor(data.responseText, data.new_slug);
                            showMessage.smallError();
                            //return false;
                            var $proceed = true;
                        } else {
                            DicVal_values_validation(form);
                        }

                    })
                    .fail(function( jqXHR, textStatus, errorThrown) {
                        //
                    })
                    .always(function(data, textStatus, jqXHR) {
                        $(form).find('.btn-form-submit').elementDisabled(false);
                    });

            } else {

                DicVal_values_validation(form);

            }

		}
	});
}



function DicVal_values_validation(form) {

    /*****************************************************************************/

    var options = {target:null, dataType:'json', type:'post'};
    options.beforeSubmit = function(formData, jqForm, options){

        $(form).find('.btn-form-submit').elementDisabled(true);

        //return false;

    },
        options.success = function(response, status, xhr, jqForm){
            $(form).find('.btn-form-submit').elementDisabled(false);
            if(response.status){
                if(response.redirect !== false){
                    BASIC.RedirectTO(response.redirect);
                }
                showMessage.constructor(response.responseText, '');
                showMessage.smallSuccess();
            }else{
                showMessage.constructor(response.responseText, response.responseErrorText);
                showMessage.smallError();
            }

            if(typeof response.form_values != 'undefined' && response.form_values.length) {
                $(response.form_values).each(function(i) {
                    //alert(i + ' > ' + data[i] + " | ");
                    $.each(response.form_values, function(i, val) {
                        $(i).val(val).text(val);
                    });
                });
            }

            //alert(typeof(onsuccess_function));
            //alert(onsuccess_function);
            if (typeof onsuccess_function == 'function') {
                setTimeout(onsuccess_function(response), 100);
            }

        }
    options.error = function(xhr, textStatus, errorThrown){
        if (typeof(xhr.responseJSON) != 'undefined') {
            var err_type = xhr.responseJSON.error.type;
            var err_file = xhr.responseJSON.error.file;
            var err_line = xhr.responseJSON.error.line;
            var err_message = xhr.responseJSON.error.message;
            var msg_title = err_type;
            var msg_body = err_file + ":" + err_line + "<hr/>" + err_message;
        } else {
            console.log(xhr);
            var msg_title = textStatus;
            var msg_body = xhr.responseText;
        }

        $(form).find('.btn-form-submit').elementDisabled(false);
        showMessage.constructor(msg_title, msg_body);
        showMessage.smallError();
    }
    $(form).ajaxSubmit(options);
}

/*** gallery.js ***/

/**
 * @author: Alexander Zelensky
 * Gallery functionality JS file
 */

var dropzone_translate = {

    // Dictionary

    // The text used before any files are dropped
    dictDefaultMessage: "Перетяните сюда файлы для загрузки",

    // The text that replaces the default message text it the browser is not supported
    dictFallbackMessage: "Ваш браузер не поддерживает загрузку drag-and-drop",

    // The text that will be added before the fallback form
    // If null, no text will be added at all.
    dictFallbackText: "Пожалуйста, используйте форму ниже, чтобы загрузить файлы.",

    // If the filesize is too big.
    dictFileTooBig: "Cлишком большой файл ({{filesize}}Мб). Максимально допустимый размер: {{maxFilesize}}Мб.",

    // If the file doesn't match the file type.
    dictInvalidFileType: "Данный тип файлов запрещен к загрузке",

    // If the server response was invalid.
    dictResponseError: "Ошибка при загрузке. Код ответа сервера: {{statusCode}}",

    // If used, the text to be used for the cancel upload link.
    dictCancelUpload: "Отменить",

    // If used, the text to be used for confirmation when cancelling upload.
    dictCancelUploadConfirmation: "Вы действительно хотите отменить загрузку?",

    // If used, the text to be used to remove a file.
    dictRemoveFile: "Удалить",

    // If this is not null, then the user will be prompted before removing a file.
    dictRemoveFileConfirmation: null,

    // Displayed when the maxFiles have been exceeded
    // You can use {{maxFiles}} here, which will be replaced by the option.
    dictMaxFilesExceeded: "Достигнут лимит на кол-во загруженных файлов: {{maxFiles}}"
};

    $(document).ready(function(){

    	Dropzone.autoDiscover = false;

        /*************************************************************************/

		var dz_selector = ".egg-dropzone";
		
        $(dz_selector).each(function(index, el) {
            //console.log( index + ": " + $( this ).text() );

            var el_name = $(el).data("name");
			var gallery_id = $(el).data('gallery_id');
            var max_file_size = $(el).data("maxfilesize");
            var max_files = $(el).data("maxfiles");
            var acceptedFiles = $(el).data("acceptedfiles");

            var dropzone_settings = {
                url: base_url + "/admin/galleries/abstractupload",
                addRemoveLinks : true,
                maxFilesize: max_file_size || 2, // MB
                maxFiles: max_files || 0,
                acceptedFiles: acceptedFiles || 'image/*'
            };
            dropzone_settings = array_merge(dropzone_settings, dropzone_translate);

			var myDropzone = new Dropzone(
				el, dropzone_settings
			);

	        myDropzone.on("totaluploadprogress", function(data) {
	            //console.log(data);
	        });

			myDropzone.on("success", function(file, response) {
				//alert(response.image_id);
				$(el).append("<input type='hidden' name='" + el_name + "[uploaded_images][]' value='" + response.image_id + "' id='uploaded_image_" + response.image_id + "' />");
			});

			myDropzone.on("sending", function(file, xhr, formData) {
				//formData.append("filesize", file.size); // Will send the filesize along with the file as POST data.
				//console.log(file);
				//console.log(xhr);
				//console.log(formData);
				formData.append("gallery_id", gallery_id);
			});

			myDropzone.on("removedfile", function(file) {
				//console.log(file);
				// Как-то так...
                if (typeof file.xhr != 'undefined' && typeof file.xhr.response != 'undefined') {
    				var image_id = JSON.parse(file.xhr.response).image_id;
    				deleteUploadedImage(image_id);
                }
				//return false;
			});
            
        }); // jQuery.each

        /*************************************************************************/

		var dz_selector = ".egg-dropzone-single";
		
        $(dz_selector).each(function(index, el) {

            var el_name = $(el).data("name");
            var gallery_id = 0; //$(el).data('gallery_id');
			var preview = $(el).parent().find(".photo-preview");
            var max_file_size = $(el).data("maxfilesize");
            var acceptedFiles = $(el).data("acceptedfiles");

            var dropzone_settings = {
                url: base_url + "/admin/galleries/singleupload",
                addRemoveLinks : true,
                maxFilesize: max_file_size || 2, // MB
                acceptedFiles: acceptedFiles || 'image/*',
                uploadMultiple: false,
                parallelUploads: 1,
                maxFiles: 1,
                dictMaxFilesExceeded: 'Можно загрузить только одно изображение.',
                init: function() {
                    this.on("addedfile", function() {
                        // Single image upload
                        if (this.files[1] != null){
                            this.removeFile(this.files[0]);
                        }
                    });
                }
            }
            dropzone_settings = array_merge(dropzone_settings, dropzone_translate);

            var myDropzone = new Dropzone(
				el, dropzone_settings
			);

	        myDropzone.on("totaluploadprogress", function(data) {
	            //console.log(data);
	        });

			myDropzone.on("success", function(file, response) {
                //console.log(file);
                //console.log(response);
				$(el).append("<input type='hidden' name='" + el_name + "' value='" + response.image_id + "' class='uploaded_image_" + response.image_id + "' />");
                $(el).parent().parent().find(".uploaded_image_false").empty().remove();
				$(el).hide();
                //$(el).find(".dz-preview").empty().remove();
                $(el).find(".dz-preview").hide();
                $(preview).css("background-image", "url("+response['thumb']+")");
                $(preview).find(".photo-full-link").attr("href", response['full']);
                $(preview).find(".photo-delete-single").attr("data-photo-id", response['image_id']);
                $(preview).show();
                $(preview).parents().find('.photo-preview-container').show();
			});

			myDropzone.on("sending", function(file, xhr, formData) {
				//formData.append("filesize", file.size); // Will send the filesize along with the file as POST data.
				//console.log(file);
				//console.log(xhr);
				//console.log(formData);
				formData.append("gallery_id", gallery_id);
			});

			myDropzone.on("removedfile", function(file) {
				//console.log(file);
				// Как-то так...
                if (typeof file.xhr != 'undefined' && typeof file.xhr.response != 'undefined') {
    				var image_id = JSON.parse(file.xhr.response).image_id;
    				deleteUploadedImage(image_id);
                }
				//return false;
			});
            
        }); // jQuery.each
        
        /*************************************************************************/
        
        $('.photo-delete').click(function(event){
            event.preventDefault();
            var image_id = $(this).attr('data-photo-id');
            var $photoDiv = $(this).parent();
    		$.SmartMessageBox({
    			title : "Удалить изображение?",
    			content : "",
    			buttons : '[Нет][Да]'
    		},function(ButtonPressed) {
    			if(ButtonPressed == "Да") {
                    $.ajax({
                        url: base_url + "/admin/galleries/photodelete",
                        data: { id: image_id },
                        type: 'post',
                    }).done(function(){
                        $photoDiv.fadeOut('fast');
                    }).fail(function(data){
                        $photoDiv.fadeOut('fast');
                        console.log(data);
                    });           
                    return false;
    			}
    		});
    		return false;
        });

        $('.photo-delete-single').click(function(event){
            event.preventDefault();
            var image_id = $(this).attr('data-photo-id');
            var el = $(this).parents('.input');
            var eldz = $(el).find('.egg-dropzone-single');
            var preview = $(el).find('.photo-preview');
    		$.SmartMessageBox({
    			title : "Удалить изображение?",
    			content : "",
    			buttons : '[Нет][Да]'
    		},function(ButtonPressed) {
    			if(ButtonPressed == "Да") {
                    $.ajax({
                        url: base_url + "/admin/galleries/photodelete",
                        data: { id: image_id },
                        type: 'post',
                    }).done(function(){
                        console.log(el);
                        $(el).find(".uploaded_image_" + image_id).empty().remove();
        				$(el).append("<input type='text' name='" + eldz.data("name") + "' class='uploaded_image_false uploaded_image_cap' />");

                        $(eldz).removeClass('dz-started');
                        $(eldz).show();
                        $(preview).hide();
                        $(preview).parents('.photo-preview-container').hide();
                    }).fail(function(data){
                        console.log(data);
                    });           
                    return false;
    			}
    		});
    		return false;
        });

		function deleteUploadedImage(image_id) {
            $.ajax({
                url: base_url + "/admin/galleries/photodelete",
                data: { id: image_id },
                type: 'post',
            }).done(function(){
                $(".uploaded_image_" + image_id).empty().remove();
                //$photoDiv.fadeOut('fast');
            }).fail(function(data){
                console.log(data);
            });
            return false;
		}

    	//$('.superbox').SuperBox();

	});

init_sortable(base_url + '/admin/gallery/ajax-order-save', '.photo-previews');

/*** pages.js ***/

// some JS code
$(document).on('click', '.pages_block_redactor_toggle', function(){

    //var element = $('#blockEditModal textarea');
    var element = $(this).parent().parent().find('textarea');
console.log(element);
    var inited = $(element).parent().find('.redactor_editor').attr('class');
console.log(inited);

    if( inited ) {
        $(element).redactor('destroy');
    } else {
        if ( $(element).hasClass('redactor') )
            $(element).redactor(imperavi_config || {});
        else if ( $(element).hasClass('redactor-no-filter') )
            $(element).redactor(imperavi_config_no_filter || {});
    }

});


$(document).on('click', 'button#reset_block_content', function(){

    var default_block_content = $(this).parents('form').find('#default_block_content').html();
    console.log(default_block_content);
    if (default_block_content != '')
        $(this).parents('form').find('.editor_block_content').html(default_block_content);
    return true;

});

/*** groups.js ***/

/*  Author: Grapheme Group
 *  http://grapheme.ru/
 */
 
$(function(){

    $(".remove-group").click(function() {
		var $this = this;
		$.SmartMessageBox({
			title : "Удалить группу пользователей?",
			content : "",
			buttons : '[Нет][Да]'
		},function(ButtonPressed) {
			if(ButtonPressed == "Да") {
				$.ajax({
					url: $($this).parent('form').attr('action'),
					type: 'DELETE',
                    dataType: 'json',
					beforeSend: function(){ $($this).elementDisabled(true);},
					success: function(response,textStatus,xhr){
						if(response.status == true){
							showMessage.constructor('Удаление группы пользователей', response.responseText);
							showMessage.smallSuccess();
							$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
						}else{
							$($this).elementDisabled(false);
							showMessage.constructor('Удаление группы пользователей','Возникла ошибка. Обновите страницу и повторите снова');
							showMessage.smallError();
						}
					},
					error: function(xhr,textStatus,errorThrown){
						$($this).elementDisabled(false);
						showMessage.constructor('Удаление группы пользователей','Возникла ошибка. Повторите снова');
						showMessage.smallError();
					}
				});
			}
		});
		return false;
	});
});

function runFormValidation() {
	
	var validation = $("#group-form").validate({
		rules:{
			name: {required : true},
			desc: {required : true},
			dashboard: {required : true},
		},
		messages : {
			name : {required : 'Укажите название группы'},
			desc : {required : 'Укажите описание группы'},
			dashboard : {required : 'Укажите стартовую страницу группы'},
		},
		errorPlacement : function(error, element){error.insertAfter(element.parent());},
		submitHandler: function(form) {
			var options = {target: null,dataType:'json',type:'post'};
			options.beforeSubmit = function(formData,jqForm,options){
				$(form).find('.btn-form-submit').elementDisabled(true);
			},
			options.success = function(response,status,xhr,jqForm){
				$(form).find('.btn-form-submit').elementDisabled(false);
				if(response.status){
					if(response.redirect !== false){
						BASIC.RedirectTO(response.redirect);
					}
					showMessage.constructor(response.responseText,'');
					showMessage.smallSuccess();
				}else{
					showMessage.constructor(response.responseText,response.responseErrorText);
					showMessage.smallError();
				}
			}
			$(form).ajaxSubmit(options);
		}
	});
}


/*** menu_editor.js ***/


var menu_items = $('.dd.menu-list');


var menu_editor = {

    'show_hide_info': function() {
        var info = $('.menu_list_info');
        if ($(menu_items).find('li').length)
            info.hide();
        else
            info.show();
    },

    'update_output': function() {
        updateOutputMenuList($('.dd.menu-list'));
        menu_editor.show_hide_info();
    },

    'show_menu': function(order, items) {
        //console.log(order);
        //console.log(items);

        var $this = this;
        //var menu = '';
        var menu = $this.get_menu_list(order, items);

        //$('.dd.menu-list').append(menu);
        $(menu_items).find('ol:first').append(menu);
        $this.update_output();
    },


    'add_menu_item': function(type, params) {
        //alert(type);
        //console.log(params);

        var $this = this;
        params.type = type;

        var new_menu_item = $this.get_menu_list_item(params);
        //alert(new_menu_item);

        $(menu_items).find('ol:first').append(new_menu_item);
        $this.update_output();
    },


    'get_menu_list': function(order, items) {

        var $this = this;
        var menu_list = '';

        /**
         * Each item of the list
         */
        $.each(order, function(i, val) {

            /**
             *
             * Childrens
             */
            var inner_list = '';
            if (val.children) {
                inner_list = $this.get_menu_list(val.children, items);
            }
            //console.log(inner_list);

            /**
             * Menu item with childrens list
             */
            menu_item = $this.get_menu_list_item(items[val.id], inner_list);
            //console.log(menu_item);

            menu_list += menu_item;
        });

        return menu_list;
    },

    'get_menu_list_item': function(params, inner_list) {
        var type = params.type;
        //console.log(params);
        var main_block = $('#templates .main').html();
        var block = $('#templates .' + type).html();
        if (!N)
            var N = $(menu_items).find('.dd-item').length;
        //alert(N);
        switch (type) {
            case 'page':
                var title = params.text;
                var mark = 'Страница';
                block = str_replace('%page_id%', params.page_id, block);
                block = str_replace('++page_id++', params.page_id, block);
                block = str_replace('%text%', params.text, block);
                break;
            case 'link':
                var title = params.text || params.url;
                var mark = 'Ссылка';
                block = str_replace('%url%', params.url, block);
                block = str_replace('%text%', params.text, block);
                break;
            case 'route':
                var title = params.text || params.route_name;
                var mark = 'Маршрут';
                block = str_replace('%route_name%', params.route_name, block);
                block = str_replace('%route_params%', params.route_params, block);
                block = str_replace('%text%', params.text || '', block);
                break;
            case 'function':
                var title = params.text || '<без названия>';
                var mark = 'Функция';
                block = str_replace('%function_name%', params.function_name, block);
                block = str_replace('%text%', params.text, block);
                block = str_replace('%use_function_data%', params.use_function_data ? 'checked' : '', block);
                break;
            default:
                break;
        }
        main_block = str_replace('%title%', title || '', main_block);
        main_block = str_replace('%mark%', mark || '', main_block);

        main_block = str_replace('%inner%', block, main_block);
        main_block = str_replace('%N%', params.id || N+1, main_block);
        main_block = str_replace('%attr_title%', params.title || '', main_block);

        main_block = str_replace('%target_blank%', params.target == '_blank' ? 'checked' : '', main_block);
        main_block = str_replace('%is_hidden%', params.hidden == '1' ? 'checked' : '', main_block);

        var inner_list_block = '';
        if (inner_list) {
            inner_list_block = $('#templates .childrens').html();
            inner_list_block = str_replace('%block%', inner_list, inner_list_block);
        }
        main_block = str_replace('%childrens%', inner_list_block || '', main_block);

        return main_block;
    }

}


/**
 * PAGE
 */
$(document).on("click", ".add_to_menu.add_to_menu_page", function(e) {
    e.preventDefault();
    var page_id = $('[name=page_id]').val();
    var text = $('[name=page_id] :selected').text();

    if (!page_id)
        return false;

    menu_editor.add_menu_item('page', {'page_id': page_id, 'text': text});
    return false;
});


/**
 * LINK
 */
$(document).on("click", ".add_to_menu.add_to_menu_link", function(e) {
    e.preventDefault();
    var url = $('[name=link_url]').val();
    var text = $('[name=link_text]').val();

    if (url == 'http://')
        return false;

    menu_editor.add_menu_item('link', {'url': url, 'text': text});
    return false;
});


/**
 * ROUTE
 */
$(document).on("click", ".add_to_menu.add_to_menu_route", function(e) {
    e.preventDefault();
    var route_name = $('[name=route_name]').val();
    var route_params = $('[name=route_params]').val();

    if (!route_name)
        return false;

    menu_editor.add_menu_item('route', {'route_name': route_name, 'route_params': route_params});
    return false;
});


/**
 * FUNCTION
 */
$(document).on("click", ".add_to_menu.add_to_menu_function", function(e) {
    e.preventDefault();
    var function_name = $('[name=function_name]').val();
    var text = $('[name=function_name] :selected').text();

    if (!function_name)
        return false;

    menu_editor.add_menu_item('function', {'function_name': function_name, 'text': text});
    return false;
});


$(document).on("keyup", ".text_for_title", function(e) {
    var title = $(this).val();

    if (title == '') {
        //console.log($(this).parents('.menu_item_type_content'));
        title = $(this).parents('.menu_item_type_content').find('.default_text_for_title').val();
    }

    $(this).parents('.panel').find('.menu_item_title').text(title);
});


$(document).on("click", ".delete_menu_item", function(e) {

    e.preventDefault();

    //var block = $(this).parents('.menu_item');
    var block = $(this).parents('.dd-item');
    //console.log(block);

    // ask verification
    $.SmartMessageBox({
        title : "<i class='fa fa-refresh txt-color-orangeDark'></i> Удалить элемент меню?",
        content : "Восстановить его будет невозможно",
        buttons : '[Нет][Да]'
    }, function(ButtonPressed) {
        if (ButtonPressed == "Да") {
            $.when(
                $(block).slideUp()
            ).done(function( x ) {
                $(block).remove();
                menu_editor.update_output();
            });
        }
    });

    return false;
});

var nestable_output = $('#nestable-output');
var updateOutputMenuList = function(e) {

    var list = e.length ? e : $(e.target),
        output = list.data('output')
        //output = nestable_output
        ;

    //alert(typeof output);
    if (typeof output == 'undefined') {
        return false;
    }

    //console.log(list.nestable('serialize'));
    //console.log(output);
    if (window.JSON) {
        output.val(window.JSON.stringify(list.nestable('serialize')));
        //, null, 2));
    } else {
        output.val('JSON browser support required for this demo.');
    }
};

//init_sortable(false, '.menu_items');
if ($('.dd').length) {
    loadScript(base_url + '/private/js/plugin/jquery-nestable/jquery.nestable.js', function() {

        //alert(nesting_level);
        var nesting_level = nesting_level || 5;

        $('.dd.menu-list').nestable({
            //group : 1
            maxDepth: nesting_level,
            expandBtnHTML: '',
            collapseBtnHTML: ''
        }).on('change', updateOutputMenuList);

        updateOutputMenuList($('.dd.menu-list').data('output', $(nestable_output)));
    });
}

function str_replace(search, replace, subject) {
    return subject.split(search).join(replace);
}

/*** modules.js ***/

/*  Author: Grapheme Group
 *  http://grapheme.ru/
 */
 
$(function(){
	
	$('.modules-list  .module-checkbox').on('change', function(){
		
		var $this = $(this);
		var $value = 0;
		if($(this).is(':checked')){
			$value = 1;
		}
		$.ajax({
			url: $($this).parents('form').attr('action'),
			data: {name: $($this).data('name'), value: $value},
			type: 'post'
		}).done(function(response){
			showMessage.constructor("Настройки",response.responseText);
			showMessage.smallInfo();
		});
	});
    /*
	$('.lang-change').on('change', function(){
			var $_form = $(this).parent();
			var $id = $(this).val();
			$.ajax({
				url: $_form.attr('action'),
				data: { id: $id },
				type: 'post',	
			}).done(function(data){
				$.smallBox({
					title : "Settings saved!",
					content : "",
					color : "#296191",
					iconSmall : "fa fa-thumbs-up bounce animated",
					timeout : 4000
				});
			});
		});
    */
});

/*** system.js ***/

$.extend($.validator.messages, {
    required: "Это поле необходимо заполнить.",
    remote: "Пожалуйста, введите правильное значение.",
    email: "Пожалуйста, введите корректный адрес электронной почты.",
    url: "Пожалуйста, введите корректный URL.",
    date: "Пожалуйста, введите корректную дату.",
    dateISO: "Пожалуйста, введите корректную дату в формате ISO.",
    number: "Пожалуйста, введите число.",
    digits: "Пожалуйста, вводите только цифры.",
    creditcard: "Пожалуйста, введите правильный номер кредитной карты.",
    equalTo: "Пожалуйста, введите такое же значение ещё раз.",
    extension: "Пожалуйста, выберите файл с правильным расширением.",
    maxlength: $.validator.format("Пожалуйста, введите не больше {0} символов."),
    minlength: $.validator.format("Пожалуйста, введите не меньше {0} символов."),
    rangelength: $.validator.format("Пожалуйста, введите значение длиной от {0} до {1} символов."),
    range: $.validator.format("Пожалуйста, введите число от {0} до {1}."),
    max: $.validator.format("Пожалуйста, введите число, меньшее или равное {0}."),
    min: $.validator.format("Пожалуйста, введите число, большее или равное {0}.")
});

    function init_sortable(url, selector, success, connect_with) {

        if (typeof success != 'function')
            success = function(){};

        if (typeof connect_with == 'undefined')
            connect_with = '';
        else
            connect_with = '.sortable' + connect_with;

        $(document).on("mouseover", ".sortable" + selector, function(e){
            // Check flag of sortable activated
            if ( !$(this).data('sortable') ) {
                // Activate sortable, if flag is not initialized
                $(this).sortable({
                    // On finish of sorting
                    stop: function() {
                        if (url) {
                            // Find all child elements
                            var pls = $(this).find('tr, .sortable_item');
                            var poss = [];
                            // Make array with current sorting order
                            $(pls).each(function(i, item) {
                                poss.push($(item).data('id'));
                            });
                            // Send ajax request to server for saving sorting order
                            $.ajax({
                                url: url,
                                type: "post",
                                data: { poss: poss },
                                success: success
                            });
                        }
                    },
                    cancel: ".not-sortable",
                    distance: 5,
                    connectWith: connect_with
                });
            }
        });
    }



    Array.max = function( array ){
        return Math.max.apply( Math, array );
    };

    // Function to get the Min value in Array
    Array.min = function( array ){
        return Math.min.apply( Math, array );
    };

    /*
    //updated as per Sime Vidas comment.
    var widths= $('img').map(function() {
        return $(this).width();
    }).get();

    alert("Max Width: " + Array.max(widths));
    alert("Min Width: " + Array.min(widths));
    */

    jQuery.fn.tagName = function() {
        return this.prop("tagName");
    };


    function array_merge() {
        //  discuss at: http://phpjs.org/functions/array_merge/
        // original by: Brett Zamir (http://brett-zamir.me)
        // bugfixed by: Nate
        // bugfixed by: Brett Zamir (http://brett-zamir.me)
        //    input by: josh
        //   example 1: arr1 = {"color": "red", 0: 2, 1: 4}
        //   example 1: arr2 = {0: "a", 1: "b", "color": "green", "shape": "trapezoid", 2: 4}
        //   example 1: array_merge(arr1, arr2)
        //   returns 1: {"color": "green", 0: 2, 1: 4, 2: "a", 3: "b", "shape": "trapezoid", 4: 4}
        //   example 2: arr1 = []
        //   example 2: arr2 = {1: "data"}
        //   example 2: array_merge(arr1, arr2)
        //   returns 2: {0: "data"}

        var args = Array.prototype.slice.call(arguments),
            argl = args.length,
            arg,
            retObj = {},
            k = '',
            argil = 0,
            j = 0,
            i = 0,
            ct = 0,
            toStr = Object.prototype.toString,
            retArr = true;

        for (i = 0; i < argl; i++) {
            if (toStr.call(args[i]) !== '[object Array]') {
                retArr = false;
                break;
            }
        }

        if (retArr) {
            retArr = [];
            for (i = 0; i < argl; i++) {
                retArr = retArr.concat(args[i]);
            }
            return retArr;
        }

        for (i = 0, ct = 0; i < argl; i++) {
            arg = args[i];
            if (toStr.call(arg) === '[object Array]') {
                for (j = 0, argil = arg.length; j < argil; j++) {
                    retObj[ct++] = arg[j];
                }
            } else {
                for (k in arg) {
                    if (arg.hasOwnProperty(k)) {
                        if (parseInt(k, 10) + '' === k) {
                            retObj[ct++] = arg[k];
                        } else {
                            retObj[k] = arg[k];
                        }
                    }
                }
            }
        }
        return retObj;
    }


    $("input[type=checkbox].system_checkbox.mark_all_checkbox").click(function(){
        var checked = $(this).is(':checked');

        $('input[type=checkbox]').each(function(i){
            if (!$(this).hasClass('system_checkbox')) {
                if (checked)
                    $('input[type=checkbox]').prop('checked', true);
                else
                    $('input[type=checkbox]').prop("checked", false);
            }
        });
    });

    //*
    $(".system_checkbox.toggle_all_checkbox").click(function(){
        $('input[type=checkbox]').each(function(i){
            if (!$(this).hasClass('system_checkbox')) {
                var checked = $(this).prop("checked");
                $(this).prop("checked", !checked)
            }
        });
    });
    //*/


    $('label[data-helpmessage]').each(function(){
        //alert($(this).data('helpmessage'));
        var content = $(this).html();
        var helpmessage = $(this).data('helpmessage');
        $(this).html(content + "\n" + '<i class="fa fa-question-circle cursor-help" data-toggle="tooltip" data-placement="bottom" title="' + helpmessage + '"></i>');
    });